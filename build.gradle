buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_core_release_group = 'net.corda'
        corda_release_version = '4.3'
        corda_core_release_version = '4.3'
        corda_gradle_plugins_version = '5.0.4'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        log4j_version = '2.11.2'
        slf4j_version = '1.7.25'
        corda_platform_version = '5'

        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"

    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }

    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }

}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


dependencies {
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testCompileClasspath fileTree(dir: 'lib/dependencies', include: '*.jar')
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "$corda_release_group:corda-test-utils:$corda_release_version"

    //accounts
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"


}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required for shell commands.
}

sourceSets {
    main{
        java {
            srcDir 'src/main/java'
            java.outputDir = file('bin/main')
        }
    }
    test{
        java {
            srcDir 'src/test/java'
            java.outputDir = file('bin/test')
        }
    }
}

cordapp {
    targetPlatformVersion 5
    minimumPlatformVersion 5
    contract {
        name "Bootcamp Contracts"
        vendor "R3"
        licence "A liberal, open source licence"
        versionId 1
    }
    workflow {
        name "Bootcamp Flows"
        vendor "R3"
        licence "A really expensive proprietary licence"
        versionId 1
    }
}




task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    //Java version check
    if (JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new GradleException("This build must be run with java 8")
    }
    nodeDefaults {
        projectCordapp { deploy = true }

        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        cordapp("$accounts_release_group:accounts-contracts:$accounts_release_version")
        cordapp("$accounts_release_group:accounts-workflows:$accounts_release_version")

    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        cordapps = []
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10005")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
        extraConfig = ['h2Settings.address' : 'localhost:20042']
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10006
        rpcSettings {
            address("localhost:10007")
            adminAddress("localhost:10008")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
        extraConfig = ['h2Settings.address' : 'localhost:20043']

    }
    node {
        name "O=PartyC,L=Lagos,C=NG"
        p2pPort 10009
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10011")
        }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
    }
}
